macro kal_init()
    declare kal_iter := 0
    declare const KAL_LOADED := 1 
end macro

on init
    declare kal_iter := 0
    declare const KAL_LOADED := 1
    make_custom_button(button_it, "image", 1, 1)
end on

function change_volume_group(volume, group)
    _set_engine_par(ENGINE_PAR_VOLUME, volume, group, 0, -1)
end function

function change_volume_group_range(volume, first, last)
    sep_group_range(ENGINE_PAR_VOLUME, volume, first, last, 0, -1)
end function

function change_tuning_group(tuning, group)
    _set_engine_par(ENGINE_PAR_TUNE, tuning, group, 0, -1)
end function

function change_tuning_group_range(tuning, first, last)
    sep_group_range(ENGINE_PAR_TUNE, tuning, first, last, 0, -1)
end function

function change_cutoff_group(cutoff, group, slot)
    _set_engine_par(ENGINE_PAR_CUTOFF, cutoff, group, slot, -1)
end function

function change_resonance_group(resonance, group, slot)
    _set_engine_par(ENGINE_PAR_RESONANCE, resonance, group, slot, -1)
end function

function change_filter_gain_group(gain, group, slot)
    set_engine_par(ENGINE_PAR_GAIN, gain, group, slot, -1)
end function

function change_cutoff_group_range(cutoff, first, last, slot)
    sep_group_range(ENGINE_PAR_CUTOFF, cutoff, first, last, slot, -1)
end function

function change_resonance_group_range(resonance, first, last, slot)
    sep_group_range(ENGINE_PAR_RESONANCE, resonance, first, last, slot, -1)
end function

function change_filter_gain_group_range(gain, first, last, slot)
    sep_group_range(ENGINE_PAR_GAIN, gain, first, last, slot, -1)
end function

function set_env_hold(name, value, group)
    _set_engine_par(ENGINE_PAR_HOLD, value, group, find_mod(group,name), -1)
end function

function set_env_attack(name, value, group)
    _set_engine_par(ENGINE_PAR_ATTACK, value, group, find_mod(group,name), -1)
end function

function set_env_decay(name, value, group)
    _set_engine_par(ENGINE_PAR_DECAY, value, group, find_mod(group,name), -1)
end function

function set_env_sustain(name, value, group)
    _set_engine_par(ENGINE_PAR_SUSTAIN, value, group, find_mod(group,name), -1)
end function

function set_env_release(name, value, group)
    _set_engine_par(ENGINE_PAR_RELEASE, value, group, find_mod(group,name), -1)
end function

function set_env_hold_group_range(name, value, first, last)
    sep_target_group_range(ENGINE_PAR_HOLD, value, first, last, name, -1)
end function

function set_env_attack_group_range(name, value, first, last)
    sep_target_group_range(ENGINE_PAR_ATTACK, value, first, last, name, -1)
end function

function set_env_decay_group_range(name, value, first, last)
    sep_target_group_range(ENGINE_PAR_DECAY, value, first, last, name, -1)
end function

function set_env_sustain_group_range(name, value, first, last)
    sep_target_group_range(ENGINE_PAR_SUSTAIN, value, first, last, name, -1)
end function

function set_env_release_group_range(name, value, first, last)
    sep_target_group_range(ENGINE_PAR_RELEASE, value, first, last, name, -1)
end function

function set_lfo_sine(name, value, group)
    _set_engine_par(ENGINE_PAR_LFO_SINE, value, group, find_mod(group,name), -1)
end function

function set_lfo_tri(name, value, group)
    _set_engine_par(ENGINE_PAR_LFO_TRI, value, group, find_mod(group,name), -1)
end function

function set_lfo_rect(name, value, group)
    _set_engine_par(ENGINE_PAR_LFO_RECT, value, group, find_mod(group,name), -1)
end function

function set_lfo_saw(name, value, group)
    _set_engine_par(ENGINE_PAR_LFO_SAW, value, group, find_mod(group,name), -1)
end function

function set_lfo_rand(name, value, group)
    _set_engine_par(ENGINE_PAR_LFO_RAND, value, group, find_mod(group,name), -1)
end function

function set_lfo_pulse(name, value, group)
    _set_engine_par(ENGINE_PAR_INTMOD_PULSEWIDTH, value, group, find_mod(group,name), -1)
end function

function set_lfo_frequency(name, value, group)
    _set_engine_par(ENGINE_PAR_INTMOD_FREQUENCY, value, group, find_mod(group,name), -1)
end function

function change_group_int_target_intensity(value, mod_name, target_name, group)
    set_engine_par(ENGINE_PAR_MOD_TARGET_INTENSITY,value,group,find_mod(group,mod_name),find_target(group,find_mod(group,mod_name),target_name))
end function

function change_groups_int_target_intensity(value, mod_name, target_name, first, last)
    for kal_iter:= first to last
        change_group_int_target_intensity(value, mod_name, target_name, kal_iter)
    end for
end function

function change_group_ext_target_intensity(value, target_name, group)
    set_engine_par(ENGINE_PAR_MOD_TARGET_INTENSITY, value, group, find_mod(group, target_name),-1)
end function

function change_groups_ext_target_intensity(value, target_name, first, last)
    for kal_iter:= first to last
        change_group_ext_target_intensity(value, target_name, kal_iter)
    end for
end function

function change_group_int_target_intensity_bipolar(value, mod_name, target_name, group)
    set_engine_par(ENGINE_PAR_INTMOD_INTENSITY,value,group,find_mod(group,mod_name),find_target(group,find_mod(group,mod_name),target_name))
end function

function change_groups_int_target_intensity_bipolar(value, mod_name, target_name, first, last)
    for kal_iter:= first to last
        change_group_int_target_intensity_bipolar(value, mod_name, target_name, kal_iter)
    end for
end function

function change_group_ext_target_intensity_bipolar(value, target_name, group)
    set_engine_par(ENGINE_PAR_INTMOD_INTENSITY, value, group, find_mod(group, target_name),-1)
end function

function change_groups_ext_target_intensity_bipolar(value, target_name, first, last)
    for kal_iter:= first to last
        change_group_ext_target_intensity_bipolar(value, target_name, kal_iter)
    end for
end function

macro set_wallpaper(image)
    set_control_par_str(INST_WALLPAPER_ID, CONTROL_PAR_PICTURE, image)
end macro

macro make_custom_knob(variable, image, min_value, max_value, x, y)
    declare ui_slider variable(min_value, max_value)
    hide_part(variable,  HIDE_PART_BG .or. HIDE_PART_MOD_LIGHT .or. HIDE_PART_TITLE .or. HIDE_PART_VALUE)
    variable -> PICTUTRE := image
    variable -> MOUSE_BEHAVIOUR := -500
    move_control_px(variable, x, y)
end macro

macro make_image_label(variable, image, x, y)
    declare ui_label variable(0, 0)
    variable -> PICTUTRE := image
    variable -> TEXT := ""
    move_control_px(variable, x, y)
end macro

macro make_custom_button(variable, image, x, y)
    declare ui_button variable
    hide_part(variable,  HIDE_PART_BG .or. HIDE_PART_MOD_LIGHT .or. HIDE_PART_TITLE .or. HIDE_PART_VALUE)
    variable -> TEXT := ""
    move_control_px(variable, x, y)
end macro

function set_instrument_icon(image)
    INST_ICON_ID -> PICTURE := image
end function

function grid_coord(position, slots, offset, size) -> result
    result := ((size / slots) * (position-1)) + offset
end function

function horizontal_grid_coord(position, slots, offset) -> result
    result := grid_coord(position, slots, offset, 632)
end function

macro set_automation_name(variable, name)
    variable -> AUTOMATION_NAME := name
end macro

macro enable_automation(variable)
    variable -> ALLOW_AUTOMATION := 1
end macro

macro disable_automation(variable)
    variable -> ALLOW_AUTOMATION := 0
end macro

macro sep_group_range(parameter, value, first, last, slot, generic)
    for kal_iter := first to last
        _set_engine_par(parameter, value, kal_iter, slot, generic)
    end for
end macro

macro sep_target_group_range(parameter, value, first, last, target_name, generic)
    for kal_iter := first to last
        _set_engine_par(parameter, value, kal_iter, find_mod(kal_iter, target_name), generic)
    end for
end macro

